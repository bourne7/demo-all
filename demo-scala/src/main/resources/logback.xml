<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- https://doc.akka.io/docs/akka/current/typed/logging.html -->

    <property name="LOG_HOME" value="logs"/>

    <property name="LOG_PATTERN"
              value="%date{yyyy-MM-dd HH:mm:ss.SSS} | %-5level | %thread | %logger{5} # %method | %msg | MDC %mdc %marker %n"/>

    <!-- 我还是更喜欢带颜色和行号的，不过带行号会对性能由影响。颜色的话，用 cat 和 more 能显示 -->
    <property name="LOG_PATTERN_LINE_COLOR"
              value="%cyan(%date{yyyy-MM-dd HH:mm:ss.SSS}) | %highlight(%-5level) | %blue(%logger{5}) %cyan(#) %blue(%method) %cyan(#) %blue(%line) | %boldMagenta(%msg) | %boldYellow(MDC) %yellow(%mdc) %magenta(%marker) | %green(%thread) %n"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <pattern>${LOG_PATTERN_LINE_COLOR}</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="DAILY_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 注意这里要用 SizeAndTimeBasedRollingPolicy 这个策略，可以兼容日期和大小 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/application-log-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>7</maxHistory>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- One part that is important to highlight is the importance of configuring an AsyncAppender, because it offloads rendering of logging events to a background thread, increasing performance. It doesn't block the threads of the ActorSystem while the underlying infrastructure writes the log messages to disk or other configured destination. It also contains a feature which will drop INFO and DEBUG messages if the logging load is high. -->
    <appender name="DAILY_DEBUG_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- The maximum capacity of the blocking queue. By default, queueSize is set to 256. -->
        <queueSize>8192</queueSize>
        <!-- Never drop logs -->
        <discardingThreshold>0</discardingThreshold>
        <!-- If false (the default) the appender will block on appending to a full queue rather than losing the message. Set to true and the appender will just drop the message and will not block your application. -->
        <neverBlock>true</neverBlock>
        <appender-ref ref="DAILY_DEBUG" />
    </appender>

    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <!-- <appender-ref ref="DAILY_DEBUG_ASYNC"/> -->
        <appender-ref ref="DAILY_DEBUG"/>
    </root>

</configuration>